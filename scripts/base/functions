#!/bin/bash
# Function definitions used in the entrypoint file.

declare -A uri
#
# Environment variable reading function
#
# The function enables reading environment variable from file.
#
# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature
function file_env() {
  local var="$1"
  local fileVar="${var}_FILE"
  local def="${2:-}"
  if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
    echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
    exit 1
  fi
  local val="$def"
  if [ "${!var:-}" ]; then
    val="${!var}"
  elif [ "${!fileVar:-}" ]; then
    val="$(< "${!fileVar}")"
  fi
  export "$var"="$val"
  unset "$fileVar"
}


#
# URI parsing function
#
# The function creates global variables with the parsed results.
# It returns 0 if parsing was successful or non-zero otherwise.
#
# [schema://][user[:password]@]host[:port][/path][?[arg1=val1]...][#fragment]
#
function uri_parser() {
  # uri capture
  full="$@"

    # safe escaping
    full="${full//\`/%60}"
    full="${full//\"/%22}"

		# URL that begins with '/' is like 'file:///'
		if [[ "${full:0:1}" == "/" ]]; then
			full="file://localhost${full}"
		fi
		# file:/// should be file://localhost/
		if [[ "${full:0:8}" == "file:///" ]]; then
			full="${full/file:\/\/\//file://localhost/}"
		fi

    # top level parsing
    pattern='^(([a-z0-9]{2,6})://)?((([^:\/]+)(:([^@\/]*))?@)?([^:\/?]+)(:([0-9]+))?)(\/[^?]*)?(\?[^#]*)?(#.*)?$'
    [[ "$full" =~ $pattern ]] || return 1;

    # component extraction
    full=${BASH_REMATCH[0]}
		uri[uri]="$full"
    uri[schema]=${BASH_REMATCH[2]}
    uri[address]=${BASH_REMATCH[3]}
    uri[user]=${BASH_REMATCH[5]}
    uri[password]=${BASH_REMATCH[7]}
    uri[host]=${BASH_REMATCH[8]}
    uri[port]=${BASH_REMATCH[10]}
    uri[path]=${BASH_REMATCH[11]}
    uri[query]=${BASH_REMATCH[12]}
    uri[fragment]=${BASH_REMATCH[13]}
		if [[ ${uri[schema]} == "smb" && ${uri[path]} =~ ^/([^/]*)(/?.*)$ ]]; then
			uri[share]=${BASH_REMATCH[1]}
			uri[sharepath]=${BASH_REMATCH[2]}
		fi

		# does the user have a domain?
		if [[ -n ${uri[user]} && ${uri[user]} =~ ^([^\;]+)\;(.+)$ ]]; then
			uri[userdomain]=${BASH_REMATCH[1]}
			uri[user]=${BASH_REMATCH[2]}
		fi
		return 0
}

#
# place the backup in appropriate location(s)
#
function backup_target() {
  local target=$1
  # determine target proto
  uri_parser ${target}

  # what kind of target do we have? Plain filesystem? smb?
  case "${uri[schema]}" in
    "file")
      mkdir -p ${uri[path]}
      cpOpts="-a"
      [ -n "$DB_DUMP_KEEP_PERMISSIONS" -a "$DB_DUMP_KEEP_PERMISSIONS" = "false" ] && cpOpts=""
      cp $cpOpts ${TMPDIR}/${SOURCE} ${uri[path]}/${TARGET}
      ;;
    "s3")
      # allow for endpoint url override
      #[[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--endpoint-url $AWS_ENDPOINT_URL"
      #aws ${AWS_CLI_OPTS} ${AWS_ENDPOINT_OPT} s3 cp ${TMPDIR}/${SOURCE} "${DB_DUMP_TARGET}/${TARGET}"
      [[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--host $AWS_ENDPOINT_URL --host-bucket $AWS_ENDPOINT_URL"
      s3cmd ${AWS_ENDPOINT_OPT} --multipart-chunk-size-mb=250MB put ${TMPDIR}/${SOURCE} "${DB_DUMP_TARGET}/${TARGET}"
      ;;
    "s3sync")
      DB_DUMP_TARGET_PARAM=$(echo -n "${DB_DUMP_TARGET/s3sync:/s3:}")
      #[[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--endpoint-url $AWS_ENDPOINT_URL"
      #aws ${AWS_CLI_OPTS} ${AWS_ENDPOINT_OPT} s3 sync --delete --exclude "*.his" ${DB_DIR_TARGET}/ ${DB_DUMP_TARGET}
      [[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--host $AWS_ENDPOINT_URL --host-bucket $AWS_ENDPOINT_URL"
      s3cmd ${AWS_ENDPOINT_OPT} --multipart-chunk-size-mb=250MB sync ${DB_DIR_TARGET}/ ${DB_DUMP_TARGET_PARAM}/ --skip-existing --exclude '*.his' --delete-removed --no-check-md5
      ;;
    "smb")
      if [[ -n "$SMB_USER" ]]; then
        UPASSARG="-U"
        UPASS="${SMB_USER}%${SMB_PASS}"
      elif [[ -n "${uri[user]}" ]]; then
        UPASSARG="-U"
        UPASS="${uri[user]}%${uri[password]}"
      else
        UPASSARG=
        UPASS=
      fi
      if [[ -n "${uri[userdomain]}" ]]; then
        UDOM="-W ${uri[userdomain]}"
      else
        UDOM=
      fi

      # smb has issues with the character `:` in filenames, so replace with `-`
      smbTargetName=${TARGET//:/-}
      smbclient -N "//${uri[host]}/${uri[share]}" ${UPASSARG} "${UPASS}" ${UDOM} -c "cd ${uri[sharepath]}; put ${TMPDIR}/${SOURCE} ${smbTargetName}"
     ;;
  esac
  [ $? -ne 0 ] && return 1
  return 0
}

function delete_target() {
  if [[ -z "$DB_DUMP_OLDDAYS_REMOVE" ]]; then
    return 0
  fi

  local target=$1
  SOURCE_PATTERN="${SOURCE_PREFIX}_*.$EXTENSION"
  # determine target proto
  uri_parser ${target}

  case "${uri[schema]}" in
    "file")
      find ${uri[path]} -name "$SOURCE_PATTERN" -mtime +$DB_DUMP_OLDDAYS_REMOVE -exec rm {} \;
     ;;
    "s3")
      DB_DUMP_TARGET_PARAM=$(echo -n "${DB_DUMP_TARGET/s3sync:/s3:}")
      [[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--host $AWS_ENDPOINT_URL --host-bucket $AWS_ENDPOINT_URL"
      olderThan=$(date -d "@$(( $(busybox date +%s) - 86400 * $DB_DUMP_OLDDAYS_REMOVE ))" +%s)
      s3cmd ${AWS_ENDPOINT_OPT} ls $DB_DUMP_TARGET_PARAM/ | while read -r line;
      do
        createDate=$(echo $line|awk {'print $1" "$2'})
        createDate=$(date -d "$createDate" "+%s")        
        if [[ $createDate -le $olderThan ]];
          then 
            fileName=$(echo $line|awk {'print $4'})
            echo $fileName
            if [ $fileName != "" ]
              then
                s3cmd ${AWS_ENDPOINT_OPT} del "$fileName"
            fi
        fi
      done;

      # [[ -n "$AWS_ENDPOINT_URL" ]] && AWS_ENDPOINT_OPT="--endpoint-url $AWS_ENDPOINT_URL"
      # aws ${AWS_CLI_OPTS} ${AWS_ENDPOINT_OPT} s3 ls $DB_DUMP_TARGET/ | grep " PRE " -v | while read -r line;
      # do
      #   createDate=`echo $line|awk {'print $1" "$2'}`
      #   createDate=$(date -d "$createDate" "+%s")
      #   olderThan=$(date -d "@$(( $(busybox date +%s) - 86400 * $DB_DUMP_OLDDAYS_REMOVE ))" +%s)
      #   if [[ $createDate -le $olderThan ]];
      #     then
      #       fileName=`echo $line|awk {'print $4'}`
      #       if [ $fileName != "" ]
      #         then
      #           printf 'Deleting "%s"\n' "$DB_DUMP_TARGET/$fileName"
      #           aws ${AWS_CLI_OPTS} ${AWS_ENDPOINT_OPT} s3 rm "$DB_DUMP_TARGET/$fileName"
      #       fi
      #   fi
      # done;
  esac
  [ $? -ne 0 ] && return 1
  return 0
}